;; (org-link-set-parameters "zotero" :follow
;;                          (lambda (zpath)
;;                            (browse-url
;;                             ;; we get the "zotero:"-less url, so we put it back.
;;                             (format "zotero:%s" zpath))))

#+end_src

** rga and zotero                                                     :WIP:

Search Microsoft Word and PDF files in Zotero (or elsewhere if you decide)

#+begin_src emacs-lisp
;; Ensure you install rg, rga, and any adapters for filetypes you want to search listed by rga --rga-list-adapters.
;; E.g., pdf requires poppler and docx requires pandoc.  Modify consult-ripgrep-args below to accommodate desired
;; filetypes. See also rg --type-list and the -t flag.
;; Docs for rg: https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md
;; Docs for rga: rga --help

(defvar zotero-storage "/Users/jkroes/Zotero/storage/")

;; Based on +vertico-file-search. A separate function is needed b/c consult-ripgrep-args is overridden rather than
;; modified.
;; TODO Are there any Zotero-specific text search tools that allow e.g. filtering on tags? I might have to write a
;; custom tool...
;; Also replace literal filename with zotero item name
(cl-defun +vertico-zotero-search (&key query)
  "Conduct a Zotero file search using ripgrep-all.

:query STRING
  Determines the initial input to search for."
  (interactive)
  (declare (indent defun))
  (unless (executable-find "rg")
    (user-error "Couldn't find ripgrep in your PATH"))
  (require 'consult)
  (setq deactivate-mark t)
  (let* ((directory zotero-storage)
         (consult-ripgrep-args
          (concat "rga "
                  "--null --line-buffered --color=never --max-columns=1000 "
                  "--path-separator /   --smart-case --no-heading --line-number "
                  ;; NOTE "\"*.docx\"" translates to ".*.docx" on the command line,
                  ;; and rg allows extended globbing alternatives via "{,}"
                  ;; NOTE rga does not yet support PowerPoint, even though pandoc does
                  "-g \"*.{txt,docx,pdf}\" "
                  " ."))
         (prompt "Search Zotero")
         (query (or query
                    (when (doom-region-active-p)
                      (regexp-quote (doom-thing-at-point-or-region)))))
         (consult-async-split-style consult-async-split-style)
         (consult-async-split-styles-alist consult-async-split-styles-alist))
    ;; Change the split style if the initial query contains the separator.
    (when query
      (cl-destructuring-bind (&key type separator initial)
          (consult--async-split-style)
        (pcase type
          (`separator
           (replace-regexp-in-string (regexp-quote (char-to-string separator))
                                     (concat "\\" (char-to-string separator))
                                     query t t))
          (`perl
           (when (string-match-p initial query)
             (setf (alist-get 'perlalt consult-async-split-styles-alist)
                   `(:initial ,(or (cl-loop for char in (list "%" "@" "!" "&" "/" ";")
                                            unless (string-match-p char query)
                                            return char)
                                   "%")
                     :type perl)
                   consult-async-split-style 'perlalt))))))
    (consult--grep prompt #'consult--ripgrep-builder directory query)))


;; Disable auto-preview since files are typically binary
(consult-customize +vertico-zotero-search :preview-key (kbd "C-SPC"))

;; consult--jump-preview

;; NOTE This package uses a slow elisp-based database. According
;; to one issue, it is unusable. But it is an example of an emacs
;; client for the web API v3
;; (use-package zotero
;;   :straight (zotero :host gitlab :repo "fvdbeek/emacs-zotero"))

;; (with-temp-buffer
;;   (insert "GET https://api.zotero.org/users/3018210/items/A7KN7DRW/children\n"
;;           "Zotero-API-Key: jKXArv2AEOc0S8ouPCrP1SzH")
;;   (restclient-mode)
;;   (restclient-http-send-current))
;; (with-current-buffer "*HTTP Response*"
;;   ;; Process json annotations
;;   ;; Find org-roam file
;;   ;; Insert new annotations with link:
;;   ;; zotero://open-pdf/library/items/<parentItem>?page=<value for pageIndex within annotationPosition>&annotation=<key>
;;   )

;; To get a link to the Zotero library item that contains the attachment, you will need another query. The key for
;; the library item differs from the attachment key. This uses the zotero://select/library/items/<key> link format.
;; To see an example of these zotero links, create notes from annotations, then export the note as a .md file.
;; To see annotations, you must have recently synced your Zotero library
#+end_src

** COMMENT search

See also the minad/affe. It's realtively new and seems to have quite a few bugs, but it might be useful for fuzzy matching text and filenames. fzf might also be an alternative but does not integrate with vertico. Maybe you can adapt counsel-fzf to vertico?

#+begin_src emacs-lisp
(use-package fzf)
#+end_src







* random general
#+begin_src emacs-lisp
(general-def my/keymaps-map
  ;; See general bindings all in one buffer
  "g" 'general-describe-keybindings)
(general-def my/help-map
  "c" 'describe-key-briefly
  "i" 'info
  "I" 'info-display-manual
  "K" 'Info-goto-emacs-key-command-node
  "l" 'view-lossage
  "m" 'describe-mode
  "M" 'describe-minor-mode
  "p" 'describe-package
  "P" 'finder-by-keyword
  "s" 'describe-symbol
  "S" 'info-lookup-symbol
  "w" 'where-is
  "X" 'Info-goto-emacs-command-node)
(general-def :keymaps 'my/files-map
  ;; Allows for consistent wk replacement text during cyclical map navigation
  :wk-full-keys nil
  "b" '(:prefix-command my/bookmarks-map :wk "bookmarks")
  ;; https://beyondgrep.com/feature-comparison/
  "d" 'my/dired-default-directory
  "f" 'find-file-at-point
  "i" 'insert-file)
(general-def my/bookmarks-map
  :wk-full-keys nil
  "d" 'bookmark-delete
  "e" 'edit-bookmarks
  ;; TODO Causes recursion in embark-bindings
  ;;"f" '(my/files-map :wk "files")
  "l" 'bookmark-bmenu-list
  "r" 'bookmark-rename
  ;; Can be used within ranger/deer/dired. Previously set bookmarks can be
  ;; viewed there with "B"
  "s" 'bookmark-set)

#+end_src

* straight-general

#+begin_src emacs-lisp
(my-leader "P" '(:prefix-command my/packages-map :wk "packages"))

(general-def my/packages-map
  "d" 'straight-primary-dependencies
  "D" 'straight-dependents
  "g" 'straight-get-recipe
  "f" 'straight-fetch-all
  "p" 'straight-pull-all
  ;; Clear unused packages from build cache and directory
  "P" 'straight-prune-build
  "m" 'straight-merge-all
  ;; Verify remote URLs are set correctly, no merge in progress, clean worktree,
  ;; and primary :branch is checked out.
  "n" 'straight-normalize-all
  "p" 'straight-push-all
  "r" 'straight-rebuild-all
  "u" 'straight-visit-package-website
  "v" 'straight-freeze-versions
  "V" 'straight-thaw-versions
  "w" 'straight-watcher-start
  "W" 'straight-watcher-stop)
;; "F" 'straight-fetch-package
;; "P" 'straight-pull-package
;; "M" 'straight-merge-package
;; "N" 'straight-normalize-package
;; "P" 'straight-push-package
;; "R" 'straight-rebuild-package
#+end_src

* server

#+begin_src emacs-lisp :tangle no
(server-start) ; Route emacsclient calls to this Emacs instance
(if (not (and (boundp 'server-process)
              (processp 'server-process)
              (server-running-p)))
    (message "----- Initiating emacs server -----"))

(load "server-extensions")
(general-define-key
 :states '(normal insert)
 "C-q" 'server-shutdown)

(when (featurep 'ns)
  (defun ns-raise-emacs ()
    "Raise Emacs."
    (ns-do-applescript "tell application \"Emacs\" to activate"))

  (defun ns-raise-emacs-with-frame (frame)
    "Raise Emacs and select the provided frame."
    (with-selected-frame frame
      (when (display-graphic-p)
        (ns-raise-emacs))))

  (add-hook 'after-make-frame-functions 'ns-raise-emacs-with-frame)

  (when (display-graphic-p)
    (ns-raise-emacs)))
#+end_src

* OS-specific Settings

#+begin_src emacs-lisp
(cond ((eq system-type 'gnu/linux)
       (setq bookmark-file (concat user-emacs-directory "bookmarks_gnu")
             projectile-known-projects-file
             (concat user-emacs-directory "projectile-bookmarks_gnu.eld")
             ;; Open webpages in Windows
             browse-url-generic-program "/mnt/c/Windows/System32/cmd.exe"
             browse-url-generic-args '("/c" "start" "")
             browse-url-browser-function 'browse-url-generic)
       (set-frame-font "Hack 12" nil t)
       )
      ((eq system-type 'darwin)
       (setq mac-command-modifier 'control
             ;; E.g., M-RET instead of A-RET
             mac-option-modifier 'meta
             ;; MacOS ls doesn't support the --dired flag. If gls is not
             ;; available, set dired-use-ls-dired to nil
             insert-directory-program "/opt/homebrew/bin/gls"
             bookmark-file (concat user-emacs-directory "bookmarks_macos")
             projectile-known-projects-file
             (concat user-emacs-directory "projectile-bookmarks_macos.eld")
             )
       (set-frame-font "Hack 14" nil t)
       (general-define-key :states '(normal insert emacs)
                           ;; HYPER-SPC (hammerspoon) is bound to S-`
                           "C-`" 'other-frame)))
;; (when (string-match "Linux.*Microsoft.*Linux" (shell-command-to-string "uname -a"))
#+end_src

* zero-width characters

#+begin_src emacs-lisp
(set-face-background 'glyphless-char "red")
(set-char-table-range glyphless-char-display
                      (char-from-name "ZERO WIDTH SPACE") 'thin-space)
#+end_src

* line wrap

#+begin_src emacs-lisp
(setq-default fill-column 120)

;; Use auto-fill for all major modes.
;; Source: info:efaq#Turning on auto-fill by default
(setq-default auto-fill-function 'do-auto-fill)
;; (add-hook 'prog-mode-hook 'turn-on-auto-fill) ; (derived-mode-p 'prog-mode)

(load "simple-extensions")
(add-hook 'custom-mode-hook 'no-auto)
(add-hook 'markdown-mode-hook 'no-auto+visual)
;; (add-hook 'term-mode-hook 'no-auto+truncate)
(add-hook 'backtrace-mode-hook 'no-auto+visual)
;; (add-hook 'emacs-lisp-mode-hook 'no-auto+truncate)
(add-hook 'org-mode-hook 'no-auto+visual)
;; Untested
(if (not (memq 'no-auto+visual org-mode-hook))
    (progn
      ;; Emphasis markers can span 10 lines.
      (setcar (nthcdr 4 org-emphasis-regexp-components) 10)
      (org-set-emph-re 'org-emphasis-regexp-components
                       org-emphasis-regexp-components)))
#+end_src

* hydra

#+begin_src emacs-lisp
(use-package hydra
  :straight (hydra :fork t)
  :custom
  (hydra-is-helpful nil)
  (hydra-verbose t))

;; Modify hydra-base-map now so that later defhydra's inherit modifications
(load "hydra-extensions")
(advice-add 'counsel-hydra-heads :around 'counsel-hydra-integrate)
(general-def hydra-base-map "." 'counsel-hydra-heads)

(load "window-extensions")

(my-leader "w" 'hydra-window/body)

(defhydra hydra-window (:color pink)
  "Window"
  ("=" balance-windows :color blue)
  ("b" hydra-buffer/body :color blue)
  ("d" delete-other-windows :color blue)
  ("D" my/delete-other-windows-and-buffers :color blue)
  ("h" windmove-left :color blue)
  ("j" windmove-down :color blue)
  ("k" windmove-up :color blue)
  ("l" windmove-right :color blue)
  ;;("z" winner-undo)
  ;; ("z" (progn
  ;;     (winner-undo)
  ;;     (setq this-command 'winner-undo))
  ;;  "winner-undo") ; Needed for winner-redo, it appears
  ;;("Z" winner-redo)
  ("q" nil))

(load "buffer-extensions")

(my-leader "b" 'hydra-buffer/body)

(defhydra hydra-buffer (:color pink)
  "Buffer"
  ("b" counsel-switch-buffer :color blue)
  ("e" view-echo-area-messages :color blue)
  ("k" kill-buffer :color blue)
  ("K" my/kill-other-buffers :color blue)
  ("p" previous-buffer)
  ("r" rename-uniquely :color blue)
  ("s" my/switch-to-scratch :color blue)
  ("w" hydra-window/body :color blue)
  ("q" nil))
#+end_src

* ivy / counsel / swiper

#+begin_src emacs-lisp :tangle no
(straight-use-package 'counsel) ; Depends on ivy and swiper
(straight-use-package 'ivy-prescient) ; Depends on ivy and prescient
(straight-use-package 'ivy-hydra) ; Depends on ivy and hydra

(ivy-mode)

;; Overwrite the package's help file.
;; See also ivy-help command (C-h m when in minibuffer)
(with-eval-after-load "ivy"
  (setq ivy-help-file (concat user-emacs-directory "ivy-help.org")))

(counsel-mode)

(with-eval-after-load "counsel"
  ;; Must load after counsel to override its settings
  (ivy-prescient-mode)

  ;; As a list-valued option, I must either set the entire value through
  ;; customize or wait until the package loads to alter it programatically. The
  ;; latter has the advantage that you can see what was added to the list.
  (setq counsel-rg-base-command
        `(,(car counsel-rg-base-command)
          ;; Search in compressed files like builtin lisp source files
          "--search-zip"
          ,@(cdr counsel-rg-base-command))))

(load "counsel-extensions")

;; Make counsel-imenu show preview of selections
;; TODO Modify imenu-generic-expression to show all toplevel lists?
(ivy-configure 'counsel-imenu
  :update-fn 'auto)

(general-def my/help-map
  ;; describe-bindings replacement
  "b" 'counsel-descbinds)

(general-def :keymaps 'ivy-minibuffer-map
  ;; For counsel-find-file, RET should add dir to search path instead of pulling
  ;; up dired
  ;; [remap ivy-done] 'ivy-alt-done
  ;; [remap ivy-alt-done] 'ivy-done
  "M-m" 'ivy-mark
  "M-u" 'ivy-unmark)

(general-def :keymaps 'my/files-map
  "z" 'counsel-fzf
  "g" 'my/counsel-rg
  "m" 'counsel-recentf
  "s" 'swiper)

(general-def :keymaps 'my/bookmarks-map
  ;; Seems more useful than counsel-bookmark
  "b" 'counsel-bookmarked-directory)

;; Use full heading path with heading faces. To get the background as well, use
;; `'verbatim' instead of `org'. With background highlighting, `org' is
;; currently preferable.
(setq counsel-outline-face-style 'org)
#+end_src

* marginalia

#+begin_src emacs-lisp
;; Works with ivy even though ivy isn't recommended
(straight-use-package 'marginalia)
(marginalia-mode)
#+end_src

* org

#+begin_src emacs-lisp

(straight-use-package
 '(org :host github :repo "bzg/org-mode" :local-repo "org" :depth full
   :pre-build (straight-recipes-org-elpa--build) :build (:not autoloads)
   :files (:defaults "lisp/*.el" ("etc/styles/" "etc/styles/*"))))
(require 'org)
;; At least in org-mode, pressing RET twice in the middle of a paragraph causes
;; the moved text to be indented. This is undesirable. Disabling
;; electric-indent-local-mode leaves electric-indent-mode active for other
;; modes.
;; (add-hook 'org-mode-hook (lambda () (electric-indent-local-mode -1)))

;; counsel-org-tags
;; counsel-org-link ; to a headline in current buffer
;; counsel-org-entity
;; org-toggle-archive-tag
;; org-schedule
;; org-clock-in
;; org-clock-out
;; org-clock-cancel
;; org-sort
;; org-shiftdown
;; org-shiftup
;; org-shiftleft
;; org-shiftright
;; org-next-link
;; Cycle keywords. If switching from TODO to DONE for a repeating task, update
;; the timestamp by the amount of the repeater, and reset the keyword to
;; TODO. In contrast, C-- 1 C-c C-t permanently finishes the repeating
;; task. Repeating tasks are indicated as e.g. +5d, while alerts/reminders as
;; e.g. -4m. If you miss several due dates, you may want to update the
;; timestamp only once for all of these missed deadlines to a future date. This
;; requires ++ instead of +. The .+ repeater likewise updates to a future date,
;; but the new timestamp is relative to the completion time rather than the
;; timestamp. Both deadlines and schedules can have repeaters.
;; org-todo
;; Headings whose parent has this property can not be marked done until
;; siblings on earlier lines are done
;; 'org-toggle-ordered-property
(general-define-key
 :prefix-command 'my/org-map
 "a" '(:prefix-command my/org-agenda-map :wk "agenda")
 "A" '(:prefix-command my/org-attach-map :wk "attach")
 "c" '(:prefix-command my/org-cycle-map :wk "cycle")
 "i" '(:prefix-command my/org-insert-map :wk "insert")
 "s" '(:prefix-command my/org-subtree-map :wk "subtree")
 "T" '(:prefix-command my/org-toggle-map :wk "toggle")
 "," 'org-insert-structure-template ; E.g. src block
 "@" 'org-mark-subtree
 ;; See also counsel-org-agenda-headlines
 ;; TODO Check out org-rifle
 ;; Alternative: https://emacs.stackexchange.com/questions/32617/how-to-jump-directly-to-an-org-headline
 "e" 'org-expand-emphasize
 "g" 'counsel-org-goto ; headings in current buffer.
 )

;; (org-babel-do-load-languages
;;  'org-babel-load-languages
;;  '((dot . t)))

(general-define-key
 :prefix-command 'my/org-agenda-map
 ;; See also org-search-view:
 ;; https://orgmode.org/worg/org-tutorials/advanced-searching.html
 ;; TODO Show file each heading belongs to
 "g" 'counsel-org-goto-all ; headings in buffer-list
 "h" 'my/counsel-org-agenda-headlines ; Like counsel-org-goto for all agenda files
 )

(general-define-key
 :prefix-command 'my/org-attach-map
 "f" 'counsel-org-file ; list files in all attachment dirs in current buffer
 )

(general-define-key
 :prefix-command 'my/org-cycle-map
 "a" 'outline-show-all ; all text in buffer, including drawers
 "s" 'outline-show-subtree ; entire subtree (TAB TAB TAB)
 "h" 'outline-show-branches ; subtree headings (like a localized S-TAB S-TAB)
 "H" 'outline-show-children ; subtree child headings
 )

(general-define-key
 :prefix-command 'my/org-insert-map
 "d" 'org-insert-drawer
 "f" 'org-footnote-new
 "h" 'org-insert-heading ; C-u end of subtree; C-u C-u end of parent subtree
 "H" 'org-insert-heading-after-current
 "l" 'org-insert-link
 "p" 'org-set-property
 "s" 'org-insert-subheading
 ;; "y" 'org-rich-yank ; download the package to use this
 )

(general-define-key
 :prefix-command 'my/org-subtree-map
 ;; "a" ; toggle archive tag
 ;; "A" ; archive subtree
 "*" 'org-toggle-heading
 "d" 'org-cut-subtree
 "y" 'org-copy-subtree
 "p" 'org-yank
 "h" 'org-promote-subtree
 "l" 'org-demote-subtree
 "j" 'org-move-subtree-down
 "k" 'org-move-subtree-up
 ;; TODO Compare narrowing and widening to foldout
 "n" 'org-narrow-to-subtree
 "w" 'widen
 "s" 'org-sparse-tree
 "S" 'org-sort-entries
 )

(general-define-key
 :prefix-command 'my/org-toggle-map
 "b" 'org-toggle-blocks
 )

(my-leader :keymaps 'org-mode-map "m" 'my/org-map)

;; M-RET inserts heading before (at beginning of) or after current line
;; C-RET inserts heading at end of subtree
;; C-u C-u M-RET inserts heading at end of parent subtree

(general-define-key
 :keymaps 'org-src-mode-map
 "C-c '" 'my/org-edit-src-save-and-exit)

(general-def :keymaps 'org-mode-map
  "<C-tab>" 'org-force-cycle-archived
  ;; Promote/dedent heading or region (org-do-promote/demote)
  "M-h" 'org-metaleft
  "M-l" 'org-metaright
  ;; Promote/dedent subtree (org-promote/demote-subtree)
  "M-H" 'org-shiftmetaleft
  "M-L" 'org-shiftmetaright
  ;; Move heading up/down
  "M-j" 'org-shiftmetadown
  "M-k" 'org-shiftmetaup
  ;; Move subtree up/down (org-move-subtree-up/down)
  "M-J" 'org-metadown
  "M-K" 'org-metaup
  ;; Respects lists when filling
  "M-q" 'org-fill-paragraph)

(general-def
  :keymaps 'org-mode-map
  :states '(normal)              ; Setting only motion state does not work for mapping
  "DEL" 'my/org-mark-ring-goto          ; DEL because evil binds it in normal state. RET
  "RET" 'org-open-at-point  ; is only bound in motion state, which normal shadows.
  "g" '(:ignore t :wk "Entry navigation")
  "gh" 'outline-previous-visible-heading
  "gH" 'outline-up-heading
  "gl" 'outline-next-visible-heading
  "gj" 'org-forward-heading-same-level
  "gk" 'org-backward-heading-same-level
  )

;; (general-def :keymaps 'my/apps-map
;;   :wk-full-keys nil
;;   "o" '(:prefix-command my/apps-org-map :wk "org"))

;; (general-def :keymaps 'my/apps-org-map
;;   "a" 'org-agenda
;;   "e" 'counsel-org-entity ; https://orgmode.org/manual/Special-Symbols.html
;;   ;; Only used to grab links to files without added context or org IDs. For all
;;   ;; other uses see the org-roam leader binding for `org-store-link'
;;   "l" 'org-store-link-to-filepath
;;   "o" 'org-open-at-point-global)

;; TODO As an alias for counsel-outline, does advising counsel-org-goto also
;; advice counsel-outline? We don't need the advice for outline files.
;; (defun org-init-edit (old-func &rest args)
;;   "Advice used to wrap counsel-org-goto to edit the first src block under the
;; selected heading. Works best if the selected heading has a single code block."
;;   (apply old-func args)
;;   (if (equal buffer-file-name
;;              (expand-file-name
;;               (concat
;;                (file-name-as-directory user-emacs-directory)
;;                "init.org")))
;;       (progn
;;       (org-babel-next-src-block)
;;       (org-edit-special))))

;; (advice-add 'counsel-org-goto :around 'org-init-edit)

(defun org-expand-emphasize ()
  (interactive)
  (require 'expand-region)
  (er--expand-region-1)
  (er--expand-region-1)
  (org-emphasize))

(defun my/org-edit-src-save-and-exit ()
  (interactive)
  (org-edit-src-save)
  (org-edit-src-exit)
  ;; Prevents accidental text insertion
  (evil-normal-state))

(defun my/org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-aftertodo-statistics-hook 'my/org-summary-todo)

;; TODO make this exit even if you C-g and abort the command
(defun my/counsel-org-agenda-headlines ()
  "Like counsel-org-agenda-headlines but additionally exits org-agenda-files buffers
opened by this command, to avoid polluting counsel-org-goto-all results."
  (interactive)
  (counsel-org-agenda-headlines)
  (let ((f (buffer-file-name (current-buffer))))
    ;; Taken from org-agenda-exit, which can't be called directly
    (org-release-buffers org-agenda-new-buffers)
    (find-file f)))

(defun my/org-attach-reveal-in-emacs ()
  "Show the attachment directory of the current outline node in deer.
  Will create an attachment and folder if it doesn't exist yet.
  Respects `org-attach-preferred-new-method'."
  (interactive)
  (deer (org-attach-dir-get-create)))

(defun my/org-open-at-point-in-emacs ()
  "Make org-open-at-point open attachments in Emacs"
  (interactive)
  (my/org-open-at-point '(4))) ; C-u org-open-at-point

;; Reverses my/org-open-at-point-in-emacs (linear link traversal)
;; Original inspiration loosely based on
;; https://emacs.stackexchange.com/questions/31908/remove-mark-from-ring-in-org-mode
(defun my/org-mark-ring-goto ()
  (interactive)
  (setq marker (car org-mark-ring))
  (if (buffer-live-p (marker-buffer marker))
      (progn
        (pop-to-buffer-same-window (marker-buffer marker))
        (goto-char marker)
        (when (or (org-invisible-p)
                  (org-invisible-p2))
          (org-show-context 'mark-goto))
        ;; Replace CAR with empty marker
        (setf (car org-mark-ring) (make-marker))
        ;; Appears to pop the CAR, then rotate the CAR to the CAR of the CDR.
        ;; I wonder if this is a feature of circular lists that popped elements
        ;; are moved instead of removed
        (pop org-mark-ring)
        marker)
    (message "No previous org-mark.")))

;; see org-file-apps(-*). By default text files are opened in Emacs. If point is
;; on a headline, offer to open all links in headline and entry text. See also
;; org-link-frame-setup
;; org-mark-ring-push (automatic for commands following internal links)
;; org-mark-ring-goto
;; org-next-link
;; org-previous-link
;; org-insert-link-global/org-open-at-point-global
(defun my/org-open-at-point (&optional arg)
  "Modified to distinguish between headings with attached directories and
  files, and to open directories as normal for the original
  function--org-attach-reveal or org-attach-reveal-in-emacs--but
  to use org-attach-open or org-attach-open-in-emacs for attached files (i.e.,
  attachments with the ID property)."
  (interactive "P")
  (org-load-modules-maybe)
  (setq org-window-config-before-follow-link (current-window-configuration))
  (org-remove-occur-highlights nil nil t)
  (unless (run-hook-with-args-until-success 'org-open-at-point-functions)
    (let* ((context
            ;; Only consider supported types, even if they are not the
            ;; closest one.
            (org-element-lineage
             (org-element-context)
             '(clock comment comment-block footnote-definition
               footnote-reference headline inline-src-block inlinetask
               keyword link node-property planning src-block timestamp)
             t))
           (type (org-element-type context))
           (value (org-element-property :value context))
           (my/id (org-element-property :ID context)))
      (cond
       ((not type) (user-error "No link found"))
       ;; No valid link at point.  For convenience, look if something
       ;; looks like a link under point in some specific places.
       ((memq type '(comment comment-block node-property keyword))
        (call-interactively #'org-open-at-point-global))
       ;; On a headline or an inlinetask, but not on a timestamp,
       ;; a link, a footnote reference.
       ((memq type '(headline inlinetask))
        (org-match-line org-complex-heading-regexp)
        (if (and (match-beginning 5)
                 (>= (point) (match-beginning 5))
                 (< (point) (match-end 5)))
            ;; On tags.
            (org-tags-view
             arg
             (save-excursion
               (let* ((beg (match-beginning 5))
                      (end (match-end 5))
                      (beg-tag (or (search-backward ":" beg 'at-limit) (point)))
                      (end-tag (search-forward ":" end nil 2)))
                 (buffer-substring (1+ beg-tag) (1- end-tag)))))
          ;; Not on tags.
          (pcase (org-offer-links-in-entry (current-buffer) (point) arg)
            (`(nil . ,_)
             (require 'org-attach)
             (if my/id
                 (progn
                   (message "Opening attachment-file")
                   (if (equal arg '(4))
                       (org-attach-open-in-emacs)
                     (org-attach-open)))
               (message "Opening attachment-dir")
               (if (equal arg '(4))
                   (my/org-attach-reveal-in-emacs)
                 (org-attach-reveal))))
            (`(,links . ,links-end)
             (dolist (link (if (stringp links) (list links) links))
               (search-forward link nil links-end)
               (goto-char (match-beginning 0))
               (org-open-at-point arg))))))
       ;; On a footnote reference or at definition's label.
       ((or (eq type 'footnote-reference)
            (and (eq type 'footnote-definition)
                 (save-excursion
                   ;; Do not validate action when point is on the
                   ;; spaces right after the footnote label, in order
                   ;; to be on par with behavior on links.
                   (skip-chars-forward " \t")
                   (let ((begin
                          (org-element-property :contents-begin context)))
                     (if begin (< (point) begin)
                       (= (org-element-property :post-affiliated context)
                          (line-beginning-position)))))))
        (org-footnote-action))
       ;; On a planning line.  Check if we are really on a timestamp.
       ((and (eq type 'planning)
             (org-in-regexp org-ts-regexp-both nil t))
        (org-follow-timestamp-link))
       ;; On a clock line, make sure point is on the timestamp
       ;; before opening it.
       ((and (eq type 'clock)
             value
             (>= (point) (org-element-property :begin value))
             (<= (point) (org-element-property :end value)))
        (org-follow-timestamp-link))
       ((eq type 'src-block) (org-babel-open-src-block-result))
       ;; Do nothing on white spaces after an object.
       ((>= (point)
            (save-excursion
              (goto-char (org-element-property :end context))
              (skip-chars-backward " \t")
              (point)))
        (user-error "No link found"))
       ((eq type 'inline-src-block) (org-babel-open-src-block-result))
       ((eq type 'timestamp) (org-follow-timestamp-link))
       ((eq type 'link) (org-link-open context arg))
       (t (user-error "No link found")))))
  (run-hook-with-args 'org-follow-link-hook))

;; Not sure I ever used this. Must have grabbed it from some online source.
(defun my-org-custom-sparse-tree (todo-only match &optional
                                            match-body parents-body)
  "Create a custom sparse tree that only shows matched headings and parents.
For TODO-ONLY and MATCH see `org-match-sparse-tree'.
If MATCH-BODY is non-nil the bodies of the matches are shown.
If PARENTS-BODY is non-nil the bodies of the parents are shown."
  ;; Create the sparse tree.
  (org-match-sparse-tree todo-only match)
  (let ((pt-first (save-excursion
                    (org-first-headline-recenter)
                    (point)))
        (hls org-occur-highlights))
    ;; Hide everything.
    (outline-flag-region pt-first (point-max) t)
    ;; For each occur highlight overlay (the matches).
    (dolist (hl hls)
      (save-excursion
        (goto-char (overlay-start hl))
        ;; Unhide match.
        (outline-show-heading)
        (when match-body (outline-show-entry))
        ;; Unhide parents.
        (while (org-up-heading-safe)
          (outline-show-heading)
          (when parents-body (outline-show-entry))))))
  ;; Hide all archived subtrees again.
  (org-hide-archived-subtrees (point-min) (point-max)))

;; org-insert-link
;;auto-desc
(defun org-store-link-to-filepath (arg)
  "I use this to grab the filepath of org files without context about the line
where this is called in the link and without an ID (being created). Also grabs
other files without context."
  (interactive "P")
  (let ((org-link-context-for-files nil)
        major-mode)
    ;; No way to store a link to an org-mode file without an ID, either
    ;; preexisting or created anew. We only want the filepath in the link, which
    ;; we can get if we mask the `major-mode' from `derived-mode-p' within
    ;; `org-store-link'.
    (and (derived-mode-p 'org-mode)
         (setq major-mode 'text-mode))
    ;; Need to call with `interactive?' set to `t' to store link for
    ;; `org-insert-link'
    (org-store-link nil t))
  ;; Without this, the description portion of the newly created element of
  ;; org-stored-links will be the same as the filepath and avoids the
  ;; org-insert-link prompt to enter or accept the description text. Instead,
  ;; the link is inserted without a description. (Some users may prefer this.)
  ;; Any non-nil description value that doesn't match the link portion will pull
  ;; up the prompt with the value as a suggestion.
  (let ((desc (cdr (nth 0 org-stored-links))))
    (setcar desc (if (equal arg '(4))
                     nil
                   (file-name-nondirectory (car desc))))))

;; Convert URL to a compressed org link. Useful for shortening links you don't
;; want to add a description to (e.g., as content for a TODO heading)
(defun compress-org-link (arg)
  (interactive "P")
  (let ((url (thing-at-point 'url))
    (bounds (bounds-of-thing-at-point 'url)))
    (kill-region (car bounds) (cdr bounds))
    (insert (format "%s" url (truncate-string-to-width url (if arg (prefix-numeric-value arg) 40) nil nil "...")))))
#+end_src

* org-blocks

#+begin_src emacs-lisp
(defvar org-blocks-hidden org-hide-block-startup)

(defun org-blocks-hidden-initialize ()
  (make-local-variable 'org-blocks-hidden))

;;(add-hook 'org-mode-hook 'org-blocks-hidden-initialize)

(defun org-cycle-blocks (cycle-state)
  "Make org-cycle respect the value of org-blocks-hidden (set by
org-toggle-blocks)"
  (if (memq cycle-state '(all subtree))
      (if org-blocks-hidden
          (org-hide-block-all)
        (org-show-block-all))))

;;(add-hook 'org-cycle-hook 'org-cycle-blocks)

(defun org-toggle-blocks ()
  "Toggle block visibility on or off."
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))
#+end_src

* org-appear

#+begin_src emacs-lisp
(use-package org-appear
  :custom
  (org-appear-autoemphasis t)
  (org-appear-autoentities t)
  (org-appear-autolinks t)
  (org-appear-autosubmarkers nil))

(add-hook 'org-mode-hook 'org-appear-mode)
#+end_src

* org-visual-outline


WARNING This works with org-mode 9.5.1 but not 9.5.3. I had to navigate to the org repo and `git checkout release_9.5.1', then invoke straight-freeze-versions

#+begin_src emacs-lisp
(straight-use-package
 '(org-visual-indent :host github :repo "legalnonsense/org-visual-outline"
   :files ("org-visual-indent.el")))

(straight-use-package
 '(org-dynamic-bullets :host github :repo "legalnonsense/org-visual-outline"
   :files ("org-dynamic-bullets.el")))

(autoload 'org-visual-indent-mode "org-visual-indent")
(autoload 'org-dynamic-bullets-mode "org-dynamic-bullets")
(add-hook 'org-mode-hook 'org-visual-indent-mode)
(add-hook 'org-mode-hook 'org-dynamic-bullets-mode)
#+end_src

* org-contrib

(straight-use-package 'org-contrib)

** org-eldoc

#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook 'org-eldoc-load)
#+end_src

* org-wsl

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/29902/more-detailed-description-of-how-to-set-up-org-file-apps-for-orgmode-9-0
(add-to-list 'org-file-apps-gnu '("^/mnt/" . open-in-windows))
;; (add-to-list 'org-file-apps-gnu '("\\.xls?x" . open-in-windows) t)
#+end_src

* org-roam

#+begin_src emacs-lisp
;; (straight-use-package 'org-roam)

;; (setq org-roam-directory (concat user-emacs-directory "org-roam"))
;; (setq org-roam-v2-ack t) ; Must set before loading org-roam

;; ;; org-agenda, org-roam-bibtex, and org-noter all have their own entrypoints,
;; ;; but they also depend on org-roam with my configuration
;; (require 'org-roam)

;; (with-eval-after-load "org-roam"
;;   (org-roam-db-autosync-mode)
;;   (setq org-agenda-files (list org-roam-directory user-emacs-directory)))

;; ;; TODO Adapt org heading level and path to that of outline heading.
;; (defun make-heading-node ()
;;   (concat
;;    (format "* ${title}\n:PROPERTIES:\n:ID:       %s\n:END:"
;;            (org-id-new))
;;    "\n%?"))

;; ;; This only works if you create the heading node with
;; ;; org-roam-node-find, then call org-roam-node-insert. If you call the latter
;; ;; without the former, the node is created but the ID inserted in the link to
;; ;; the node is that of the file. org-roam-capture-templates' `:target' only
;; ;; seems to consider creating file-level nodes. Heading nodes continue to be a
;; ;; manual task with the existing workflow/code base.
;; (add-to-list 'org-roam-capture-templates
;;              ;; plain inserts heading at start of file, while entry inserts
;;              ;; at the end of the file
;;              '("i" "init" entry (function make-heading-node)
;;                :target
;;                (file "init.org")
;;                :immediate-finish))

;; (my-leader "o" '(:prefix-command my/org-roam-map :wk "org-roam"))

;; (general-def my/org-roam-map
;;   ;; Find a node, or create file node named after #title using org-capture
;;   "f" 'org-roam-node-find
;;   ;; Like `org-roam-node-find' but stays in current buffer after capture
;;   "F" 'org-roam-capture
;;   "c" 'org-roam-db-clear-all
;;   ;; Creates an ID if one is missing from a node when
;;   ;; `org-id-link-to-org-use-id' is `t' or `'create-if-interactive'
;;   "l" 'org-store-link
;;   "i" 'org-roam-node-insert
;;   "B" 'org-roam-buffer-toggle
;;   ;; Add a tag to the nearest node (#+filetags or a heading tag)
;;   "t" 'org-roam-tag-add
;;   ;; Add a ref to the nearest node (:roam_refs: property for file or heading)
;;   "r" 'org-roam-ref-add
;;   "R" 'org-roam-ref-find
;;   ;; Add an alias to :roam_aliases: preoprty of the nearest node, heading or
;;   ;; file-level. Useful for distinguishing headings apart with the same text in
;;   ;; different files. Alternatively, split large notes into smaller notes with
;;   ;; unique titles instead of aliases
;;   "a" 'org-roam-alias-add
;;   "v" 'org-roam-version)

;; ;; (setq
;; ;;  org-roam-mode-section-functions
;; ;;  (list #'org-roam-backlinks-section
;; ;;        #'org-roam-reflinks-section
;; ;;        #'org-roam-unlinked-references-section))
;; ;; This breaks org-roam-buffer display and disables the keybindings
;; ;; (add-to-list 'display-buffer-alist
;; ;;              '("\\*org-roam\\*"
;; ;;                (display-buffer-in-direction)
;; ;;                (direction . right)
;; ;;                (window-width . 0.33)
;; ;;                (window-height . fit-window-to-buffer)))
#+end_src

** org-roam-bibtex

#+begin_src emacs-lisp
;; (straight-use-package 'ivy-bibtex) ; Depends on ivy and bibtex-completion
;; (autoload 'ivy-bibtex "ivy-bibtex" "" t)

;; ;; Open note instead of URL or PDF in ivy by default (RET). You can still
;; ;; open PDFs in docview (pdf-tools if available) with SPC o b M-o p
;; (setq ivy-bibtex-default-action 'ivy-bibtex-edit-notes)

;; ;; ivy-bibtex requires ivy's `ivy--regex-ignore-order` regex builder, which
;; ;; ignores the order of regexp tokens when searching for matching candidates.
;; (add-to-list 'ivy-re-builders-alist '(ivy-bibtex . ivy--regex-ignore-order))

;; ;; Depends on bibtex-completion, pdf-tools, ivy, and helm-bibtex
;; (straight-use-package 'org-ref)

;; (setq bibtex-completion-pdf-field "File"
;;       bibtex-completion-bibliography (list (concat user-emacs-directory "Reorganized.bib"))
;;       ;; Only supports a limited subset of fields in a bibtex file for
;;       ;; ivy-bibtex. TODO Modify internals to allow any field in biblatex
;;       ;; to be used. A good candidate is bibtex-completion-format-entry and
;;       ;; ivy-bibtex-display-transformer
;;       bibtex-completion-display-formats
;;       '((t . "${title:*} ${=type=:10} ${=has-pdf=:1} ${=has-note=:1} "))
;;       ;; Needed to avoid warning messages from org-ref when using ivy-bibtex
;;       org-ref-default-bibliography bibtex-completion-bibliography
;;       ;; Needed to avoid warnings (in an *org-ref* buffer) about invalid
;;       ;; bibtex entry types when using ivy-bibtex
;;       bibtex-dialect "biblatex")

;; ;; org-ref has to be loaded or ivy-bibtex with the selected action set to
;; ;; editing the note will simply create a new note every time.
;; (require 'org-ref)

;; (with-eval-after-load "org-ref"
;;   ;; org-ref sets this to t
;;   (setq hydra-is-helpful nil))

;; ;; Depends on org-ref, bibtex-completion, and org-roam
;; ;; org-ref depends on bibtex-completion, pdf-tools, hydra,ivy, helm-bibtex,
;; ;; and helm (but not ivy and ivy-bibtex built from the helm-bibtex repo). Note
;; ;; that org-ref has its own ivy frontend, org-ref-ivy-cite.
;; (straight-use-package 'org-roam-bibtex)

;; (setq orb-preformat-keywords
;;       '("citekey" "title" "url" "author-or-editor" "keywords" "file")
;;       orb-process-file-keyword t
;;       orb-file-field-extensions '("pdf"))

;; ;; Manage bib notes using org-roam and access the notes in org-roam-directory
;; ;; via ivy-bibtex or by opening org-ref's `cite:' links
;; (org-roam-bibtex-mode)

;; (general-def my/org-roam-map
;;   :wk-full-keys nil
;;   "b" '(:prefix-command my/org-roam-bibtex-map :wk "bibtex"))

;; (general-def :keymaps 'my/org-roam-bibtex-map
;;   "b" 'ivy-bibtex
;;   "l" 'orb-insert-link
;;   "a" 'orb-note-actions)

;; ;; Integrate org-roam-bibtex and org-noter based on modification to the
;; ;; code provided in the orb manual. Per orb--new-note, the only way to avoid
;; ;; template selection is for there to be a single element in
;; ;; org-roam-capture-templates. ivy-bibtex will now only use the template defined
;; ;; here.
;; (defun orb-override-org-roam-capture-templates (old-func &rest args)
;;   (let ((org-roam-capture-templates
;;          '(("b" "bibtex" plain
;;             ;; The template file to use
;;             (file (concat user-emacs-directory "bibtex-template.org"))
;;             ;; Where to create new notes. For bib(la)tex items without a file
;;             ;; field in bibtex-completion-bibliography, create the note in the
;;             ;; bibtex subfolder of the org-roam-directory. Name the note after
;;             ;; the citation key (other names could be used). For items with a
;;             ;; file, create the note within the bibtex/org-noter subdirectory of
;;             ;; org-roam-directory. Name the note the same as the file field (see
;;             ;; orb-process-file-keyword). This ensures running org-noter on
;;             ;; note headlines or from within the PDF associated with the note do
;;             ;; the same thing.
;;             ;; WARNING: Changing the PDF name will break the connection between
;;             ;; note and PDF. Alternatively, you can use a single notes file
;;             ;; for multiple documents. The current zotfile renaming rule is
;;             ;; {%a_}{%y_}{%t}, with option "Replace blanks" enabled.
;;             :target
;;             (file+head "bibtex/%(if (= (length \"${file}\") 0) \"${citekey}\"
;;             (concat \"org-noter/\" (file-name-base \"${file}\"))).org" "#+title: ${title}\n\n")
;;             :unnarrowed t))))
;;     (apply old-func args)))

;; (advice-add 'orb--new-note :around 'orb-override-org-roam-capture-templates)
#+end_src

** pdf-tools

#+begin_src emacs-lisp
(straight-use-package 'pdf-tools)

;; (customize-package
;;  '(pdf-outline-display-labels nil "Useful when off
;;  because it shows page numbers starting from 1, even for scientific articles
;;  that typically have page numbers starting in the middle of a journal. Only
;;  affects the parenthesized portion of the outline items.")
;;  '(pdf-tools-enabled-modes
;;    '(pdf-isearch-minor-mode pdf-links-minor-mode
;;      pdf-outline-minor-mode pdf-misc-size-indication-minor-mode
;;      pdf-misc-menu-bar-minor-mode pdf-annot-minor-mode
;;      pdf-misc-context-menu-minor-mode pdf-cache-prefetch-minor-mode
;;      pdf-view-auto-slice-minor-mode pdf-occur-global-minor-mode)))
#+end_src

*** pdf-view-mode-map

#+begin_src emacs-lisp
;; (defvar pdf-view-mode-map
;;   (let ((map (make-sparse-keymap)))
;;     ;; (set-keymap-parent map image-mode-map)
;;     (define-key map (kbd "Q")         'kill-this-buffer) ; no effect in
;;                                         ; org-noter?
;;     ;; Navigation in the document
;;     (define-key map "h" 'image-scroll-right)
;;     (define-key map "l" 'image-scroll-left)
;;     (define-key map "j" 'pdf-view-scroll-up-or-next-page)
;;     (define-key map "k" 'pdf-view-scroll-down-or-previous-page)
;;     (define-key map "J" 'pdf-view-next-page-command)
;;     (define-key map "K" 'pdf-view-previous-page-command)
;;     (define-key map (kbd "g g") 'pdf-view-first-page)
;;     (define-key map "G" 'pdf-view-last-page)
;;     (define-key map (kbd "g t") 'pdf-view-goto-page)
;;     ;; Zoom in/out.
;;     (define-key map "+" 'pdf-view-enlarge)
;;     (define-key map "=" 'pdf-view-enlarge)
;;     (define-key map "-" 'pdf-view-shrink)
;;     (define-key map "0" 'pdf-view-scale-reset)
;;     ;; Fit the image to the window
;;     (define-key map (kbd "w w") 'pdf-view-fit-width-to-window)
;;     (define-key map (kbd "w h") 'pdf-view-fit-height-to-window)
;;     (define-key map (kbd "w p") 'pdf-view-fit-page-to-window)
;;     ;; Slicing the image
;;     (define-key map (kbd "s s") 'pdf-view-set-slice-from-bounding-box)
;;     (define-key map (kbd "s r") 'pdf-view-reset-slice)
;;     ;; Region
;;     (define-key map [down-mouse-1] 'pdf-view-mouse-set-region)
;;     (define-key map [C-down-mouse-1] 'pdf-view-mouse-extend-region)
;;     ;; NOTE: Until isearch is evilified, e.g., `n' does nothing but `C-s'
;;     ;; moves to the next match as expected for isearch
;;     (define-key map "/" 'isearch-forward)
;;     (define-key map "?" 'isearch-backward)
;;     map)
;;   "User-modified keymap used by `pdf-view-mode' when displaying a doc as a set
;; of images.")
#+end_src

*** pdf-outline-buffer-mode-map

#+begin_src emacs-lisp
;; (defvar pdf-outline-buffer-mode-map
;;   (let ((kmap (make-sparse-keymap)))
;;     (dotimes (i 10)
;;       (define-key kmap (vector (+ i ?0)) 'digit-argument))
;;     (define-key kmap "-" 'negative-argument)
;;     (define-key kmap (kbd "j") 'next-line)
;;     (define-key kmap (kbd "k") 'previous-line)
;;     (define-key kmap (kbd "g g") 'beginning-of-buffer)
;;     (define-key kmap "G" 'pdf-outline-end-of-buffer)
;;     ;; Display and move to page
;;     (define-key kmap (kbd "RET") 'pdf-outline-follow-link-and-quit)
;;     ;; Move to the PDF window (move back to outline with the same key)
;;     (define-key kmap (kbd "o") 'pdf-outline-select-pdf-window)
;;     ;; Display page and remain in outline
;;     (define-key kmap (kbd "f") 'pdf-outline-display-link)
;;     ;; PDF follows along as you navigate the outline
;;     (define-key kmap (kbd "F") 'pdf-outline-follow-mode)
;;     ;; Move within outline to the item for the displayed page
;;     (define-key kmap (kbd "'") 'pdf-outline-move-to-current-page)
;;     (define-key kmap (kbd "`") 'pdf-outline-move-to-current-page)
;;     (define-key kmap (kbd "q") 'quit-window)
;;     (define-key kmap (kbd "Q") 'pdf-outline-quit)
;;     (define-key kmap (kbd "C-c C-q") 'pdf-outline-quit-and-kill)
;;     kmap)
;;   "User-modified keymap used in `pdf-outline-buffer-mode'.")

;; ;; See the README for external dependencies that may be required in advance of
;; ;; running this command. Since this loads pdftools, it should come after any
;; ;; defvars redefining maps
;; (pdf-tools-install)

;; ;; In case global-display-line-numbers-mode is set. It is mentioned as an issue
;; ;; in the README and disables horizontal scrolling in PDFs from my own testing
;; (add-hook 'pdf-view-mode-hook (lambda ()(display-line-numbers-mode -1)))
#+end_src

*** pdf-tools-display-buffer-alist

#+begin_src emacs-lisp
;; ;; Each element of display-buffer-alist is structured like
;; ;; '(CONDITION . (FUNCTIONS . ALIST)). The value of each alist element is known
;; ;; as an action.
;; ;; CONDITION is a regexp matching buffer name, or a function that takes two
;; ;; arguments - a buffer name and the ACTION argument of display-buffer - and
;; ;; returns a boolean
;; ;; FUNCTIONS is a (list of) action function(s), which accept two arguments - a
;; ;; buffer to display and an alist of the same form as ALIST. See display-buffer
;; ;; for a description of available action functions. Also https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Functions.html.
;; ;; ALIST is an action alist. See display-buffer for a description of available
;; ;; action alist elements. Also https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Display-Action-Alists.html.
;; ;; If CONDITION succeeds, display-buffer adds action (FUNCTIONS . ALIST) to a
;; ;; list of actions it will try.
;; ;; Since actions are cons cells, you can omit the period between FUNCTIONS and
;; ;; ALIST if you also omit the outer parentheses around ALIST.

;; (defun pdf-outline-buffer-p (buffer &rest _)
;;   "Buffer's major-mode is pdf-outline-mode"
;;   (with-current-buffer buffer
;;     (derived-mode-p 'pdf-outline-buffer-mode)))

;; (defun pdf-view-p (buffer &rest _)
;;   "Buffer's major-mode is pdf-view-mode"
;;   (with-current-buffer buffer
;;     (derived-mode-p 'pdf-view-mode)))

;; ;; By default, when calling outline from within a window displaying a PDF
;; ;; buffer, the outline opens in the selectd window. pdf-outline-display-link and
;; ;; other commands open the PDF in a second window. In contrast,
;; ;; pdf-outline-follow-link-and-quit re-displays the PDF in its original
;; ;; window. There is a variable (pdf-outline-display-buffer-action) that can be
;; ;; used; however, display-buffer-alist may be more reliable for overcoming
;; ;; hardcoded display issues for all pdf-tools buffers.

;; ;; Reuse outline's previous window or pop one open. Avoid the selected window
;; ;; even if is also the outline's previous window. Windows may or may not be
;; ;; split to pop up a window.
;; (add-to-list 'display-buffer-alist
;;              '(pdf-outline-buffer-p
;;                (display-buffer-in-previous-window display-buffer-pop-up-window)
;;                (inhibit-same-window . t)
;;                (reusable-frames)))

;; ;; Reuse PDF's previous window in current frame
;; (add-to-list 'display-buffer-alist
;;              '(pdf-view-p
;;                display-buffer-in-previous-window
;;                (reusable-frames)))
#+end_src

** org-noter

#+begin_src emacs-lisp
;; (straight-use-package 'org-noter)
#+end_src

* helpful

#+begin_src emacs-lisp
(straight-use-package 'helpful)

;; Sets C-h f/v to the helpful functions
;; (setq counsel-describe-function-function #'helpful-callable)
;; (setq counsel-describe-variable-function #'helpful-variable)

(general-def my/help-map
  "f" 'helpful-callable
  "h" 'helpful-at-point
  "v" 'helpful-variable
  "k" 'helpful-key
  "x" 'helpful-command)

;; Kill helpful buffer instead of "burying" it. This prevents buried buffers
;; from being used to display helpful buffers in their window.
(general-def helpful-mode-map
  "q" 'quit-window-kill-buffer)

(defun quit-window-kill-buffer ()
  (interactive)
  (quit-window t))

;; If this is too high, display-buffer action functions may fail to split
;; windows. Should be twice as high as the minimum desired window size.
(setq split-height-threshold 80)

;; See helpful-switch-buffer-function.
;; The current behavior is to return point to the buffer where helpful was
;; called after it is exited. Not sure if that is the result of using
;; pop-to-buffer, or something in helpful, but I like it.
;; Try to avoid using the selected window for helpful buffers. If a helpful
;; buffer is displayed in another window, try using that. Ignore other frames.
;; Inspired by https://github.com/Wilfred/helpful/issues/263. This notes that
;; there is no stack of visited help items, unlike the built-in help
;; buffers. This is why a new buffer is opened every time you call helpful.
(add-to-list 'display-buffer-alist
             ;; The regexp to match
             '("\\*helpful"
               ;; The function list to call
               display-buffer-reuse-mode-window
               ;; The action alist passed to the functions
               (mode . helpful-mode)
               ;; Setting too high can prevent window splitting
               ;; (window-height . 0.5)
               ;; (inhibit-same-window . t)
               (reusable-frames . nil)))
#+end_src

* rainbow-mode

#+begin_src emacs-lisp
(straight-use-package 'rainbow-mode)

(add-hook 'emacs-lisp-mode-hook 'rainbow-mode)
;; rainbow-mode messes with the appearance of customize buffers. In particular,
;; buttons such as the ones next to each option disappear. It also prevents
;; syntax highlighting in helpful buffers.
;; (define-globalized-minor-mode global-rainbow-mode rainbow-mode
;;   (lambda () (rainbow-mode)))
;; (global-rainbow-mode)
#+end_src

* ace-window

#+begin_src emacs-lisp
(use-package ace-window
  :custom
  (aw-keys '(97 115 100 102 103 104 106 107 108)))
#+end_src

** ace-window-hydra

#+begin_src emacs-lisp
;; All autoloaded
(defhydra+ hydra-window (:color blue)
  ("a" ace-window)
  ("c" ace-delete-window)
  ("s" ace-swap-window))
#+end_src

* command-log

#+begin_src emacs-lisp
(use-package command-log-mode
  :custom
  (command-log-mode-auto-show nil)
  (command-log-mode-is-global t)
  (command-log-mode-key-binding-open-log nil)
  (command-log-mode-open-log-turns-on-mode t)
  (command-log-mode-window-size 50))

;; Auto-scroll buffer as commands are logged
(add-hook 'command-log-mode-hook 'auto-scroll)

;; (my-leader "." 'clm/toggle-command-log-buffer)

(defun auto-scroll ()
  (set (make-local-variable 'window-point-insertion-type) t))
#+end_src

* evil-nerd-commenter

#+begin_src emacs-lisp
(straight-use-package 'evil-nerd-commenter)

(autoload 'evil-nerd-commenter-operator "evil-nerd-commenter-operator")
(my-leader ";" 'evilnc-comment-operator)

(my-leader
  "c" '(:ignore t :wk "comments")
  "cc" 'evilnc-comment-or-uncomment-lines
  "cC" 'evilnc-copy-and-comment-lines
  ;; When given C-u <n>, will forward-match <n> against the rightmost
  ;; digits of each line. E.g., on line 160, C-u <72> will target lines
  ;; 160-172
  "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  "cy" 'evilnc-comment-and-kill-ring-save
  ;; Whether empty lines can be commented as part of a selection
  "ce" 'evilnc-toggle-comment-empty-lines
  ;; When toggled off, all lines in a selection are commented if any
  ;; uncommented lines are included. Note that blank lines never count
  "cv" 'evilnc-toggle-invert-comment-line-by-line
  "c," 'evilnc-comment-operator
  "c." 'evilnc-copy-and-comment-operator)
#+end_src

* expand-region

#+begin_src emacs-lisp
(straight-use-package 'expand-region)

(my-leader "v" 'er/expand-region)
#+end_src

* page-break-lines

#+begin_src emacs-lisp
(straight-use-package 'page-break-lines)
(global-page-break-lines-mode)
#+end_src

* evil

#+begin_src emacs-lisp
(use-package evil
  :custom
  (evil-echo-state nil)
  (evil-emacs-state-modes
   '(org-roam-mode 5x5-mode archive-mode bbdb-mode biblio-selection-mode blackbox-mode bookmark-bmenu-mode bookmark-edit-annotation-mode browse-kill-ring-mode bs-mode bubbles-mode bzr-annotate-mode calc-mode cfw:calendar-mode completion-list-mode Custom-mode custom-theme-choose-mode debugger-mode delicious-search-mode desktop-menu-blist-mode desktop-menu-mode doc-view-mode dun-mode dvc-bookmarks-mode dvc-diff-mode dvc-info-buffer-mode dvc-log-buffer-mode dvc-revlist-mode dvc-revlog-mode dvc-status-mode dvc-tips-mode ediff-mode ediff-meta-mode efs-mode Electric-buffer-menu-mode emms-browser-mode emms-mark-mode emms-metaplaylist-mode emms-playlist-mode ess-help-mode etags-select-mode fj-mode gc-issues-mode gdb-breakpoints-mode gdb-disassembly-mode gdb-frames-mode gdb-locals-mode gdb-memory-mode gdb-registers-mode gdb-threads-mode gist-list-mode git-rebase-mode gnus-article-mode gnus-browse-mode gnus-group-mode gnus-server-mode gnus-summary-mode gomoku-mode google-maps-static-mode ibuffer-mode jde-javadoc-checker-report-mode magit-cherry-mode magit-diff-mode magit-log-mode magit-log-select-mode magit-popup-mode magit-popup-sequence-mode magit-process-mode magit-reflog-mode magit-refs-mode magit-revision-mode magit-stash-mode magit-stashes-mode magit-status-mode mh-folder-mode monky-mode mpuz-mode mu4e-main-mode mu4e-headers-mode mu4e-view-mode notmuch-hello-mode notmuch-search-mode notmuch-show-mode notmuch-tree-mode occur-mode org-agenda-mode package-menu-mode pdf-outline-buffer-mode pdf-view-mode proced-mode rcirc-mode rebase-mode recentf-dialog-mode reftex-select-bib-mode reftex-select-label-mode reftex-toc-mode sldb-mode slime-inspector-mode slime-thread-control-mode slime-xref-mode snake-mode solitaire-mode sr-buttons-mode sr-mode sr-tree-mode sr-virtual-mode tar-mode tetris-mode tla-annotate-mode tla-archive-list-mode tla-bconfig-mode tla-bookmarks-mode tla-branch-list-mode tla-browse-mode tla-category-list-mode tla-changelog-mode tla-follow-symlinks-mode tla-inventory-file-mode tla-inventory-mode tla-lint-mode tla-logs-mode tla-revision-list-mode tla-revlog-mode tla-tree-lint-mode tla-version-list-mode twittering-mode urlview-mode vc-annotate-mode vc-dir-mode vc-git-log-view-mode vc-hg-log-view-mode vc-svn-log-view-mode vm-mode vm-summary-mode w3m-mode wab-compilation-mode xgit-annotate-mode xgit-changelog-mode xgit-diff-mode xgit-revlog-mode xhg-annotate-mode xhg-log-mode xhg-mode xhg-mq-mode xhg-mq-sub-mode xhg-status-extra-mode))
  ;; (evil-escape-delay 0.2)
  (evil-escape-key-sequence "kj")
  (evil-mode-line-format 'after)
  (evil-move-beyond-eol nil)
  (evil-move-cursor-back t)
  (evil-respect-visual-line-mode nil)
  (evil-split-window-below t)
  (evil-undo-system 'undo-tree)
  (evil-vsplit-window-right t)
  (evil-want-C-d-scroll nil)
  (evil-want-C-i-jump nil)
  (evil-want-C-w-delete t)
  ;; Without evil integration, evil paren highlighting fails. Changed on
  ;; 10/11/21, so if anything unexpected happens this may be the cause...
  ;; '(evil-want-integration nil)
  (evil-want-keybinding nil))

(evil-mode)

(straight-use-package 'evil-escape)
(evil-escape-mode)

;; (straight-use-package 'evil-collection)
;; (straight-use-package 'evil-surround)
;; (straight-use-package 'evil-textobj-line) ; Provides 'vil' and 'val'
;; (straight-use-package 'evil-cleverparens)
;; (straight-use-package 'evil-lisp-state)
;; https://vi.stackexchange.com/questions/11913/what-is-the-purpose-of-s
;; If remapping 's', you can use 'cl' instead
;; (straight-use-package 'evil-snipe)
;; (straight-use-package 'evil-easymotion)
;; (straight-use-package '(emacs-sentence-navigation :host github
;;                         :repo "noctuid/emacs-sentence-navigation"))

;;(setq evil-toggle-key "SPC q")

;; Major mode initial evil states
(evil-set-initial-state 'Info-mode 'emacs)
(evil-set-initial-state 'pdf-occur-buffer-mode 'emacs)
;; (evil-set-initial-state 'Custom-mode 'emacs)
(evil-set-initial-state 'bufler-list-mode 'emacs)
(evil-set-initial-state 'org-roam-mode 'emacs)

;; Minor mode states
(add-hook 'edebug-mode-hook 'evil-normalize-keymaps)

;; As noted in
;; https://github.com/noctuid/evil-guide#why-dont-keys-defined-with-evil-define-key-work-immediately,
;; keymap normalization may be required in some cases. One seems to be use of
;; edebug-mode-map as an evil-intercept map. Without normalization, if in normal
;; mode SPC will trigger leader until you first switch to another evil state.
(add-hook 'edebug-mode-hook 'evil-emacs-state)

;; Disable accidental q: in normal mode
(general-define-key :states 'normal "q" nil)

;; Don't shadow xref-find-definitions (the other xref commands aren't shadowed)
(general-unbind evil-normal-state-map "M-.")
(general-unbind evil-motion-state-map "RET")
#+end_src

** evil-hydra-buffer

#+begin_src emacs-lisp
(defhydra+ hydra-buffer ()
  ("l" evil-switch-to-windows-last-buffer :color blue))
#+end_src

** evil-hydra-window

#+begin_src emacs-lisp
(defhydra+ hydra-window (:color pink)
  ("-" evil-window-decrease-height)
  ("+" evil-window-increase-height)
  ("<" evil-window-decrease-width)
  (">" evil-window-increase-width)
  ("H" evil-window-move-far-left :color blue)
  ("J" evil-window-move-very-bottom :color blue)
  ("K" evil-window-move-very-top :color blue)
  ("L" evil-window-move-far-right :color blue)
  ("r" evil-window-rotate-downwards)
  ("R" evil-window-rotate-upwards)
  ("v" evil-window-vsplit :color blue)
  ("x" evil-window-split :color blue))
#+end_src

** evil-undo-system

#+begin_src emacs-lisp
;; (straight-use-package 'undo-fu)
(straight-use-package 'undo-tree)

;; Disable until you can replace the parent buffer window with the diff window
(setq undo-tree-visualizer-diff nil)

(require 'undo-tree)

(global-undo-tree-mode)

;; evil--check-undo-systm recommends this to enable undo-tree commands in
;; non-file buffers
(add-hook 'evil-local-mode 'turn-on-undo-tree-mode)

(my-leader "u" 'undo-tree-visualize)

;; (add-to-list 'display-buffer-alist
;;              '("\\*undo-tree\\*"
;;                display-buffer-same-window
;;                (inhibit-same-window)))

;; There are bugs in the program. local variables are set in the undo-tree
;; buffer just before calling undo-tree-visualizer-mode, a major
;; mode. buffer-local variables should be assigned after a major mode becomes
;; active, or they will be cleared. I modified this function to do so. Without
;; the changes, undo-tree-visualizer-diff is modified globally and won't
;; preserve the user value between calls to undo-tree-visualize. It is clear the
;; author doesn't understand this because of the FIXME comment. They set a
;; variable, which was made automatically buffer local
;; (make-variable-buffer-local) after its `defvar', before calling the mode.
(defun undo-tree-visualize ()
  "Visualize the current buffer's undo tree."
  (interactive "*")
  (unless undo-tree-mode
    (user-error "Undo-tree mode not enabled in buffer"))
  (deactivate-mark)
  ;; throw error if undo is disabled in buffer
  (when (eq buffer-undo-list t)
    (user-error "No undo information in this buffer"))
  ;; transfer entries accumulated in `buffer-undo-list' to `buffer-undo-tree'
  (undo-list-transfer-to-tree)
  ;; add hook to kill visualizer buffer if original buffer is changed
  (add-hook 'before-change-functions 'undo-tree-kill-visualizer nil t)
  ;; prepare *undo-tree* buffer, then draw tree in it
  (let ((undo-tree buffer-undo-tree)
        (buff (current-buffer))
	    (display-buffer-mark-dedicated 'soft))
    ;; (switch-to-buffer-other-window
    (switch-to-buffer
     (get-buffer-create undo-tree-visualizer-buffer-name))
    (setq undo-tree-visualizer-parent-buffer buff)
    (setq undo-tree-visualizer-parent-mtime
	      (and (buffer-file-name buff)
	           (nth 5 (file-attributes (buffer-file-name buff)))))
    (setq undo-tree-visualizer-initial-node (undo-tree-current undo-tree))
    (setq undo-tree-visualizer-spacing
	      (undo-tree-visualizer-calculate-spacing))
    (setq buffer-undo-tree undo-tree)
    (undo-tree-visualizer-mode)
    (make-local-variable 'undo-tree-visualizer-timestamps)
    (make-local-variable 'undo-tree-visualizer-diff)
    ;; FIXME; don't know why `undo-tree-visualizer-mode' clears this
    (setq buffer-undo-tree undo-tree)
    (set (make-local-variable 'undo-tree-visualizer-lazy-drawing)
	     (or (eq undo-tree-visualizer-lazy-drawing t)
	         (and (numberp undo-tree-visualizer-lazy-drawing)
		          (>= (undo-tree-count undo-tree)
		              undo-tree-visualizer-lazy-drawing))))
    (when undo-tree-visualizer-diff (undo-tree-visualizer-show-diff))
    (let ((inhibit-read-only t)) (undo-tree-draw-tree undo-tree))))
#+end_src

* projectile

#+begin_src emacs-lisp
(straight-use-package 'projectile)

(setq projectile-project-search-path
      (list (concat user-emacs-directory "straight/repos"))
      projectile-switch-project-action #'projectile-dired
      projectile-completion-system 'ivy)

(projectile-mode)

(my-leader "p" '(:keymap projectile-command-map :wk "projects"))
;; projectile-dired
;; projectile-find-file-in-known-projects
;; projectile-ibuffer
;; projectile-save-project-buffers
;; projectile-browse-dirty-projects
;; projectile-find-other-file
;; projectile-switch-to-buffer
;; projectile-find-dir
;; projectile-recentf
;; projectile-find-file
;; projectile-kill-buffers
;; projectile-commander
;; projectile-multi-occur
;; projectile-switch-project
;; projectile-switch-open-project
;; projectile-replace
;; projectile-ripgrep (depends on rg or ripgrep emacs package)
;; projectile-vc
#+end_src

* xwwp

#+begin_src emacs-lisp
;; Currently doesn't work on WSL

;; (straight-use-package 'xwwp)

;; (customize-package '(xwwp-follow-link-completion-system 'ivy))

;; (require 'xwwp-follow-link)

;; (setq browse-url-browser-function 'xwwp-browse-url-other-window)

;; (general-def :keymaps 'xwidget-webkit-mode-map
;;   "v" 'xwwp-follow-link)

;; See xwidget-webkit mode for bindings. evilify them.
#+end_src

* mode line

** telephone-line

#+begin_src emacs-lisp
(straight-use-package 'telephone-line)
(telephone-line-mode 1)
#+end_src

* programming

** indent-guide

#+begin_src emacs-lisp
(use-package indent-guide
  :hook (prog-mode . indent-guide-mode))
#+end_src

** hideshow

#+begin_src emacs-lisp
(use-package hideshow
  :straight (:type built-in)
  :hook
  (prog-mode . hs-minor-mode)
  (ess-r-mode . alternate-evil-hs-commands)
  :custom
  (hs-hide-comments-when-hiding-all nil "Due to the implementation of
  hs-hide-all, nested outline headings or headings followed by comments,
  possibly separated by space are hidden. Without a rewrite, this is not usable
  with outline mode.")
  :config
  ;; ess-r-mode
  (load "hideshow-extensions")
  (add-to-list 'hs-special-modes-alist '(ess-r-mode "{" "}" "#" nil nil)))
#+end_src

** outline

#+begin_src emacs-lisp
;; (setq outline-regexp "\\(^#\\{4,5\\} \\)\\|\\(^[a-zA-Z0-9_\.]+ ?<-
;; ?function(.*{\\)")
(use-package outline
  :straight (:type built-in)
  :hook
  (outline-minor-mode . outline-display-heading-links)
  (emacs-lisp-mode . outline-emacs-lisp)
  :config
  (load "outline-extensions")
  (advice-add 'org-roam-node-insert
              :after 'outline-display-line-as-heading-link)
  :general
  ;; On MacOS, the tab key is <tab>. If unbound, it translates to TAB. The only
  ;; way to reliably ensure the tab key can be used to cycle outline headings is
  ;; to also bind "<tab>" in the text property keymap used for outline headings,
  ;; or to unbind it in all other keymaps. When bound here, it has higher
  ;; precedence than any other keymap.
  (:keymaps 'outline-minor-mode-cycle-map
            "<tab>" 'outline-cycle
            "RET" 'outline-open-heading-link)
  (:keymaps 'outline-minor-mode-map
            ;; Unbind outline-mode-prefix-map
            (key-description outline-minor-mode-prefix) nil
            "<backtab>" 'outline-cycle-buffer
            ;; Change heading level
            "M-h" 'outline-promote-heading
            "M-l" 'outline-demote-heading
            ;; Change subtree level
            "M-H" 'outline-promote
            "M-L" 'outline-demote
            ;; No commands to move headings, just subtrees
            "M-J" 'outline-move-subtree-down
            "M-K" 'outline-move-subtree-up
            ;; Insert heading at current level
            "M-RET" 'outline-insert-heading)
  (:keymaps 'outline-minor-mode-map
            :states '(normal)
            "g" '(:ignore t :wk "Entry navigation")
            "gh" 'outline-previous-visible-heading
            "gH" 'outline-up-heading
            "gl" 'outline-next-visible-heading
            "gj" 'outline-forward-same-level
            "gk" 'outline-backward-same-level))

(use-package outline-minor-faces
  :after outline
  :hook (outline-minor-mode . outline-minor-faces-add-font-lock-keywords))

(use-package backline
  :after outline
  :config (advice-add 'outline-flag-region :after 'backline-update))
#+end_src

** company

#+begin_src emacs-lisp
(use-package company
  :hook (prog-mode . company-mode)
  :config (load "company-extensions")
  :custom
  (company-frontends
   (list 'company-pseudo-tooltip-unless-just-one-frontend
         'company-preview-if-just-one-frontend)
   "Remove company-echo-metadata-frontend to speed up candidate navigation")
  (company-idle-delay 0.0)
  (company-minimum-prefix-length 1)
  (company-require-match nil "Otherwise company may block typing when automatic
  completion is enabled ")
  (company-selection-wrap-around t)
  (company-tooltip-align-annotations t)
  (company-tooltip-limit 20)
  :general
  (:keymaps 'global-map "<tab>" nil "TAB" nil)
  (:keymaps 'company-mode-map
            "<tab>" 'company-indent-or-complete-common
            "TAB" 'company-indent-or-complete-common)
  (:keymaps 'company-active-map
            "<return>" nil
            "RET" nil
            "<tab>" 'company-complete-selection
            "TAB" 'company-complete-selection
            "C-h" 'mode-specific-C-h
            "M-n"  nil
            "M-p"  nil
            "C-n"  'company-select-next
            "C-p"  'company-select-previous))

;; The README is incorrect. See
;; https://github.com/sebastiencs/company-box/issues/143.
;; TODO Compare to eldoc-box and company-quickhelp. Perhaps these have workable
;; company docs for ess-r-mode with lsp-mode
(use-package company-box
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-doc-enable t)
  (company-box-enable-icon t))

;; NOTE: company-capf knows about completion-styles, so lsp-mode does as well
#+end_src

** format-all

#+begin_src emacs-lisp
;; TODO R uses styler by default, but the formatter can be configured. E.g.,
;; compare to R package formatR and ess-r-mode indentation/formatting settings.

;; The main command is format-all-buffer

(use-package format-all
  :custom
  (lsp-enable-on-type-formatting nil)
  ;; Indent over region (e.g., through company-indent-or-complete-common)
  ;; formats region if this feature is enabled
  (lsp-enable-indentation nil))
#+end_src

** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :after company
  :hook
  (prog-mode . yas-minor-mode)
  (prog-mode . (lambda ()(setq yas-buffer-local-condition
                               yas-not-string-or-comment-condition)))
  (company-mode . prioritize-yas-keymap-bindings)
  :custom
  (yas-wrap-around-region t "Insert region as $0 field if present")
  :general
  (:keymaps 'yas-minor-mode-map
            "SPC" yas-maybe-expand)
  (my-leader
    "y" '(:ignore t :wk "snippets")
    "yn" 'yas-new-snippet
    "ye" 'yas-visit-snippet-file
    "ye" 'yas-visit-snippet-file)
  (my-leader :keymaps 'snippet-mode-map
    "m" '(:ignore t :wk "mode")
    "ml" 'yas-load-snippet-buffer
    "mc" 'yas-load-snippet-buffer-and-close
    "mt" 'yas-tryout-snippet)
  :config
  (yas-reload-all)
  (defun prioritize-yas-keymap-bindings ()
    "Undo company-mode changes to yas-keymap-disable-hook that prioritize
  company-active-map tooltip bindings over yas-keymap snippet completion
  bindings. E.g., C-g will abort snippet completion before the company tooltip,
  and yas next-field-or-maybe-expand will take precedence over
  company-complete-common, assuming the default bindings for <tab> and TAB in
  both maps"
    (remove-hook 'yas-keymap-disable-hook 'company--active-p t)))
#+end_src

** flycheck

#+begin_src emacs-lisp
(use-package flycheck)
#+end_src

** lsp-mode

#+begin_src emacs-lisp
(use-package lsp-mode
  :hook
  ;; sp-command-map is bound to SPC l. If binding is changed, update
  ;; lsp--prepend-prefix in lsp-extensions.el
  (lsp-mode . (lambda ()
                (my-leader 'local "l" '(:keymap lsp-command-map))))
  (lsp-mode . lsp-enable-which-key-integration)
  (ess-r-mode . ess-r-lsp)
  :config
  (load "lsp-extensions")
  :custom
  (read-process-output-max (* 1024 1024))
  ;; (lsp-log-io t)
  (lsp-headerline-breadcrumb-enable nil "Takes up space without meangingful
  improvement")
  (lsp-enable-folding nil "Uses lsp-origami. Currently origami doesn't work with
  my init.el, so I am using hideshow.")
  (lsp-signature-render-documentation nil "Remove documentation from signature
  when within a function, which leads to signature truncation and is displayed
  elsewhere. See also lsp-signature-auto-activate. Note that this is for the
  signature when typing a function call. lsp-ui-doc or lsp-eldoc-enable-hover
  show a signature on hover over a call.")
  (lsp-eldoc-enable-hover nil "Not needed with lsp-ui-doc-enable to show
  signatures on hover. Furthermore, it doesn't work with ess-r-mode unless
  lsp-eldoc-render-all is non-nil. But this enables displaying documentation.")
  (lsp-eldoc-render-all nil "This also seems to show documentation--all of
  it--similar to lsp-signature-render-documentation, but on hover. So more like
  lsp-ui-doc in the echo area. See lsp-eldoc-enable-hover")
  (lsp-modeline-diagnostics-enable nil "Not configured to work with
  telephone-line, and diagnostic messages are shown with lsp-ui-sideline")
  (lsp-enable-snippet t "Provides parameter completion with names via tab. Does
  not work for ess-r-mode"))
#+end_src

** lsp-ui

#+begin_src emacs-lisp
;; TODO Set height and width maxima to different values if
;; (x-display-pixel-width) is greater than 1440 (my laptop screen size)

;; lsp-ui-doc shows docs for objects such as functions, signatures and argument
;; descriptions for (named) function args, and the last assignment statement for
;; variables. It is quite useful when browsing complex code like package
;; functions
(use-package lsp-ui
  :custom
  (lsp-ui-doc-alignment 'frame "Has a bias toward displaying the doc childframe
in a window on the right side in the frame when this option is set to
`frame'. The actual window containing the doc childframe depends on the window
splits and location of lsp-mode buffer. Split vertically, then horizontally in
the right vertical split. Then open the same buffer in each window. The do show
up in different windows depending on which window it is called from.")
  (lsp-ui-doc-position 'bottom "Where in the chosen window to display")
  (lsp-ui-doc-max-height 10)
  (lsp-ui-doc-max-width 80)
  (lsp-ui-doc-delay 1 "At least delay a bit to keep this from popping up all the
time when you don't want it")
  (lsp-ui-doc-show-with-cursor t "Shows docs for objects such as functions,
signatures and argument descriptions for (named?) arguments, and the last
assignment statement for variables. Disabling disables all of these things.")
  (lsp-ui-doc-use-webkit nil "Non-webkit docs are closer to RStudio docs in
appearance. While webkit highlights source code in blocks, it also mislabels
some sections as code. Non-webkit docs also have the advantage that headings are
indented by level, similar to how RStudio uses different font sizes.")
  (lsp-ui-imenu-auto-refresh t)
  (lsp-ui-doc-border "#93a1a1")
  (lsp-ui-sideline-diagnostic-max-lines 10 "Arbitrary value in case more
  diagnostics are available. Tweak as you code with ess-r and learn more about
  lintr and flycheck.")
  (lsp-ui-sideline-show-code-actions nil "Get rid of e.g. the message to disable
  all linters on line")
  :general
  ;; Also available in lsp-command-map
  (:keymaps 'lsp-ui-mode-map
            [remap xref-find-definitions] 'lsp-ui-peek-find-definitions
            [remap xref-find-references] 'lsp-ui-peek-find-references)
  :config
  ;; If the common prefix for company is a complete symbol, lsp-ui-doc will
  ;; show. This is especially a problem for autocompletion where completion will
  ;; display as you type. If you need to navigate the completion menu, you
  ;; likely want to banish the doc for the common prefix symbol. This is a hack
  ;; until I can figure out how to avoid showing the doc at all when the tooltip
  ;; is visible.
  (advice-add 'company-select-next :after 'lsp-ui-doc-hide)
  (advice-add 'company-select-previous :after 'lsp-ui-doc-hide))

;; xref-find-apropos = lsp-ui-find-workspace-symbol > lsp-ui-peek-find-workspace-symbol
;; lsp-ivy-(global-)workspace-symbol
;; - compare to SPC l g a / SPC l G s
;; helm-lsp-switch-project (helm-lsp)
(use-package lsp-ivy)

;; Doesn't seem to do anything...
;; (lsp-dired-mode)

;; required for lsp-iedit-highlights. Call it at point, make edits, then hit C-g
;; over the symbol to finish editing symbols in parallel. Calling it again
;; before C-g adds additional symbols to edit in parallel. In contrast to
;; lsp-rename, editing is in the buffer rather than the minibuffer and allows
;; for more complex edits like adding a prefix to multiple symbols
;; Note: If a function and one of its arguments ar ethe same symbol, this will
;; not distinguish between the two. On the other hand, lsp-rename seems able to
;; tell the difference. You may have to enter insert mode after the symbol to be
;; renamed because sometimes you get a message about not being able to rename
;; the symbol depending on its context.
;; (use-package iedit)

;; lsp-describe-thing-at-point
;; lsp-ui-doc-show
;; lsp-auto-guess-root (projectile support?)
;; (lsp-ui-doc-focus-frame)
;; (lsp-ui-imenu) -> can be used even outside of lsp-mode buffers! Customize
;; imenu-generic-expression
;; lsp-ui-peek-jump-* (difference from xref-pop-marker-stack? Something about a
;; "window local jump list")
;; download R src code for packages so that *-find-definitions jumps to the
;; original rather than a temp file? See
;; http://applied-r.com/r-source-code/#:~:text=Compiled%20Package%20Code,the%20package%20source%20for%20you.
;; lsp-lens-enable (disabled by default; no support from ess-r)
;; lsp-modeline-* (probably not supported by telephone?)
;; in lsp-mode, a message is sent when scrolling "showing all blocks". This is
;; only defined in hs-show-all, which is called by hs-minor-mode when
;; enabling. Furthermore, when removing hs-minor-mode from prog-mode-hook, the
;; messges stop. This is strong evidence that lsp-mode is messing with this
;; minor mode. Finally, the messages don't show up in emacs lisp files, which do
;; not run lsp. And instrumenting hs-minor-mode drops us into debugging its body
;; when we scroll.

;; ;; Disable underlines in lsp-ui-doc child frames
;; (custom-set-faces '(nobreak-space ((t nil))))

;; (general-def '(motion insert emacs)
;;  "C-f" 'scroll-down-lsp-ui)

;; (defun scroll-down-lsp-ui ()
;;   "Enable scrolling documentation child frames when using lsp-ui-doc-glance"
;;   (interactive)
;;   (if (lsp-ui-doc--frame-visible-p)
;;       (let ((kmap (make-sparse-keymap)))
;;         (define-key kmap (kbd "q")
;;           '(lambda ()
;;              (interactive)
;;              (lsp-ui-doc-unfocus-frame)
;;              (setq overriding-terminal-local-map nil)
;;              (setq which-key-show-transient-maps t)))
;;         (setq which-key-show-transient-maps nil)
;;         (setq overriding-terminal-local-map kmap)
;;         (lsp-ui-doc-focus-frame)))
;;   (evil-scroll-page-down 1))
#+end_src

** emacs-lisp

#+begin_src emacs-lisp
(my-leader :keymaps 'emacs-lisp-mode-map "m" 'my/elisp-map)

(general-define-key
 :prefix-command 'my/elisp-map
 "c" 'check-parens
 "d" 'eval-defun
 "m" 'pp-eval-expression ; "m" for minibuffer, where exp is evaluated
 "s" 'pp-eval-last-sexp
 "i" 'eval-print-last-sexp ; "i" for inserting result
 "r" 'eval-region)
#+end_src

** ess-r

#+begin_src emacs-lisp
(setq ess-nuke-trailing-whitespace-p t
      ;; ess-S-quit-kill-buffers-p 'ask
      inhibit-field-text-motion nil) ; prompt acts as beginning of line if prompt is read-only
(use-package ess
  :custom
  (ess-use-eldoc (if (featurep 'lsp-mode-autoloads) nil t) "In conjunction with
  `lsp-signature-auto-activate', this option leads to two signatures in the echo
  area if an iESS buffer is associated with the current ess buffer. ")
  (ess-use-company (if (featurep 'lsp-mode-autoloads) nil t) "Don't modify
  company-backends by removing company-capf (used by lsp) and adding ess-r
  backends (ignored by lsp)")
  :hook
  (ess-mode . prettify-symbols-mode) ; pretty ligatures
  (ess-r-mode . config-ess-r-mode))


;; As far as I can tell, ess-use-company removes company-capf and adds other
;; backends to company-backends, but the ess completion function doesn't invoke
;; company. It invokes completion-at-point.
(with-eval-after-load "ess-mode"
  (general-unbind ess-mode-map "TAB"))

;; Shadows xref-find-references
(with-eval-after-load "ess-r-mode"
  (general-unbind ess-r-mode-map "M-?"))

(defun config-ess-r-mode ()
  (ess-set-style 'RStudio)
  ;; (setq-local ess-indent-offset 4) ; RStudio style uses a value of 2

  ;; Rely on electric-pair-mode instead of skeleton
  (local-set-key (kbd "{") 'self-insert-command)
  (local-set-key (kbd "}") 'self-insert-command)

  ;; electric-layout-rules interferes with ess-roxy-newline-and-indent
  ;; if electric-layout-mode is enabled (it is not by default)
  (setq-local electric-layout-rules nil))


;; Override Windows' help_type option of "html", to open help in help buffer, not browser (see contents of .Rprofile)
(pcase system-type
  ('windows-nt
   ;; iESS searches the paths listed in the variable exec-path for inferior-ess-r-program
   (add-to-list 'exec-path "c:/Users/jkroes/Documents/R/R-3.6.2/bin")
   ;; Sets R_USER and R_LIBS_USER
   (setenv "R_USER" "c:/Users/jkroes/Documents")
   ;; run-ess-r fails when this is set to Rterm
   (setq inferior-ess-r-program "R")
   (setenv "R_PROFILE_USER" "C:/Users/jkroes/.emacs.d/.Rprofile")
   ;; RStudio downloads pandoc with rmarkdown, but outside of RStudio
   ;; you need to notify R of the executable's directory
   (setenv "RSTUDIO_PANDOC" "C:/Users/jkroes/AppData/Local/Pandoc"))
  ('darwin (setenv "R_PROFILE_USER" (concat user-emacs-directory ".Rprofile"))))

;; Disabling this while I render Word documents from Rmarkdown.
;;(customize-package '(polymode-display-output-file nil))

(straight-use-package 'poly-markdown)

;; NOTE: ess-r configuration and bindings are available inside chunks, where R-mode is active
;; I have bound polymode-export (render) to SPC-m-e-k
(straight-use-package 'poly-R)

;; Prevent window displaying company documentation buffer from vanishing when
;; invoking a binding not in company--electric-commands
;; (defun forget-saved-window-config ()
;;   (setq company--electric-saved-window-configuration nil))
;; (advice-add 'company-pre-command :before 'forget-saved-window-config)

(setq display-buffer-alist
      `(("\\*company-documentation\\*"
         (display-buffer-reuse-mode-window display-buffer-in-side-window)
         (mode. ess-r-help-mode)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))
        ("\\*R Dired"
         (display-buffer-reuse-mode-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.5)
         (reusable-frames . nil))
        ("\\*R"
         (display-buffer-reuse-mode-window display-buffer-below-selected)
         (window-height . 0.2)
         (reusable-frames . nil))
        ("\\*Help\\[R"
         (display-buffer-reuse-mode-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.5)
         (reusable-frames . nil))
        ;; ("\\*Help\\*" display-buffer-same-window)
        ;; ("\\*Apropos\\*" display-buffer-same-window)
        )
      )
#+end_src

** ess-r-hydra

#+begin_src emacs-lisp
(my-leader :keymaps 'ess-r-mode-map "m" 'hydra-r/body)

(defhydra hydra-r (:color pink)
  "R"
  ("SPC" ess-mark-function-or-para)
  ("a" ess-cycle-assign) ;; See how electric functions work as hydras...
  ("d" hydra-r-debug/body :color blue)
  ("e" hydra-r-eval/body :color blue)
  ("h" hydra-r-help/body :color blue)
  ("j" ess-goto-end-of-function-or-para)
  ("k" ess-goto-beginning-of-function-or-para)
  ("r" my/start-r :color blue)
  ("s" ess-switch-to-inferior-or-script-buffer :color blue)
  ("z" ess-submit-bug-report :color blue)
  ;; prog-indent-sexp
  ;; ess-indent-exp
  ;; ess-indent-new-comment-line
  ;; ess-complete-object-name
  ("q" nil))

(defhydra hydra-r-help (:color pink) ; ess-doc-map
  "R-help"
  ("a" ess-display-help-apropos)
  ("e" hydra-r-eval/body :color blue)
  ("i" ess-display-package-index)
  ("m" ess-manual-lookup)
  ("o" ess-display-help-on-object)
  ("p" ess-describe-object-at-point)
  ("r" hydra-r/body :color blue)
  ("t" ess-display-demos)
  ("v" ess-display-vignettes)
  ("w" ess-help-web-search)
  ("q" nil))

(defhydra hydra-r-eval (:color pink) ; ess-rutils-map and ess-extra-map
  "R-eval"
  ("<C-return>" ess-eval-region-or-function-or-paragraph-and-step)
  ("RET" ess-eval-region-or-line-and-step)
  ("b" ess-eval-buffer-from-beg-to-here)
  ("e" ess-eval-buffer-from-here-to-end)
  ("E" ess-dirs)
  ("f" ess-load-file)
  ("i" inferior-ess-reload)
  ;; ("P" ess-request-a-process) ;; Display selected iESS process and buffer
  ("p" ess-switch-process) ;; Switch process attached to script (current process buffer auto-displays if new,
  ;; but any script evaluation will auto-display attached process buffer if not already visible
  ("s" ess-switch-to-inferior-or-script-buffer)
  ("r" hydra-r/body :color blue)
  ("R" ess-rdired)
  ("u" ess-use-this-dir)
  ("w" ess-change-directory)
  ("q" nil))

;; (defhydra+ hydra-r-eval()
;;   ("k" polymode-export :color blue))

;; Note that several commands available in the inferior ess R
;; process while debugging are absent:
;; f (finish)
;; s (step)
;; help
;; where
;; <expr>
;; As such, it is best to debug from the inferior process where
;; the additional, built-in functionality is needed
;; TODO: Add commands here to ess-debug-minor-mode-map
(defhydra hydra-r-debug (:color pink) ;; ess-debug-minor-mode-map and ess-dev-map
  "R-debug"
  ("c" ess-debug-command-continue)
  ("f" ess-debug-flag-for-debugging) ;; base:::debug()
  ("F" ess-debug-unflag-for-debugging) ;; base:::undebug()
  ("g" ess-debug-goto-debug-point)
  ("n" ess-debug-command-next)
  ("N" next-error)
  ("p" previous-error)
  ("q" ess-debug-command-quit :color blue) ;; Investigate diff b/w this and ess-debug-stop
  ("Q" ess-debug-stop :color blue)
  ("s" ess-switch-to-ESS :color blue)
  ;; ("t" ess-debug-toggle-error-action) ;; Sets value of error option (e.g. options(error=recover)) for active process
  ;; ("u" ess-debug-command-up) ;; NOTE: currently broken. Use recover() from within debugging session (i.e. browse())
  ;; ess-debug-goto-input-event-marker
  ;; ess-debug-insert-in-forward-ring
  ("q" nil))

(defun ess-r-mode-hydras ()
  "Hook for ess-r-mode. The functions used as hydra heads do not exist until an ess-r-mode buffer exists, so
        my/defhydra must be called after that buffer is created."
  ;;(my/defhydra 'hydra-r)
  ;;(my/defhydra 'hydra-r-help)
  ;;(my/defhydra 'hydra-r-eval)
  ;;(my/defhydra 'hydra-r-debug) ; Display hydras in which-key
)

(add-hook 'ess-r-mode-hook 'ess-r-mode-hydras)

(defun my/start-r ()
  "Start an R process."
  (interactive)
  (save-selected-window
    (run-ess-r)
    ;;(ess-rdired)
    )
  (ess-force-buffer-current))
#+end_src

* Variables

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
